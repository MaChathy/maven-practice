<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
            http://www.springframework.org/schema/beans/spring-beans.xsd
            http://www.springframework.org/schema/context
            https://www.springframework.org/schema/context/spring-context.xsd
            http://www.springframework.org/schema/util
            https://www.springframework.org/schema/util/spring-util.xsd">

    <!--引入外部属性文件-->
    <context:property-placeholder location="classpath:druid.properties"/>

    <!--给bean的值赋值：引入外部属性文件-->
    <bean id="druidDataSource" class="com.alibaba.druid.pool.DruidDataSource">
            <property name="driverClassName" value="${jdbc.driver}"/>
            <property name="url" value="${jdbc.url}"/>
            <property name="username" value="${jdbc.username}"/>
            <property name="password" value="${jdbc.password}"/>
        </bean>


    <!--根据bean标签的id，从IoC容器中获取bean，即组件对象-->
    <bean id="happyComponent" class="com.fisher.spring.ioc.component.HappyComponent"/>

    <!--根据bean标签的类型，从IoC容器中获取bean，即组件对象-->
    <bean id="happyComponent2" class="com.fisher.spring.ioc.component.HappyComponent" />

    <!--获取有多个类都实现了同一接口，并且这些类都装配了bean的bean对象-->
    <bean id="componentInterface1" class="com.fisher.spring.ioc.component.impl.ComponentInterfaceImpl1"/>
    <bean id="componentInterface2" class="com.fisher.spring.ioc.component.impl.ComponentInterfaceImpl2"/>

    <!--给bean的属性赋值：setter-->
    <bean id="happyComponent3" class="com.fisher.spring.ioc.component.HappyComponent">
        <!--property 标签（通过组件的setter方法给组件对象设置属性）
               name属性：指定属性名（属性名是setter和getter方法定义的，和成员变量名无关）
               value属性；指定属性名-->
        <property name="componentName" value="veryHappy"/>
    </bean>

    <!--给bean的属性赋值：引用外部已声明的bean-->
    <!--配置HappyMachine对应的bean-->
    <bean id="happyMachine" class="com.fisher.spring.ioc.component.HappyMachine">
        <property name="happyMachineName" value="PACE AND LOVE"/>
    </bean>
    <!--配置VeryHappyComponent对应的bean，引用了其他bean-->
    <bean id="happyComponent4" class="com.fisher.spring.ioc.component.VeryHappyComponent">
        <!--ref属性：通过bean的id引用另一个bean-->
        <property name="happyMachine" ref="happyMachine"/>
    </bean>

    <!--给bean的属性赋值：内部bean-->
    <bean id="happyComponent5" class="com.fisher.spring.ioc.component.VeryHappyComponent">
        <property name="happyMachine">
            <!--内部bean：在一个bean内部再声明一个bean
                   内部bean可以省略id属性，直接用于给属性赋值-->
            <bean class="com.fisher.spring.ioc.component.HappyMachine">
                <property name="happyMachineName" value="JUST DO IT"/>
            </bean>
        </property>
    </bean>

    <!--给bean的属性赋值：级联属性赋值-->
    <!--配置关联对象的bean-->
    <bean id="happyMachine2" class="com.fisher.spring.ioc.component.HappyMachine"/>
    <bean id="happyComponent7" class="com.fisher.spring.ioc.component.VeryHappyComponent">
        <!--装配关联对象-->
        <property name="happyMachine" ref="happyMachine2"/>
        <!-- 对HappyComponent来说，happyMachine的machineName属性就是级联属性 -->
        <property name="happyMachine.happyMachineName" value="cascadeValue"/>
    </bean>

    <!--给bean的属性赋值：构造器注入-->
    <bean id="happyTeam" class="com.fisher.spring.ioc.component.HappyTeam">
        <constructor-arg index="0" name="teamName" value="happySHIT"/>
        <constructor-arg index="1" name="memberCount" value="10"/>
        <constructor-arg index="2" name="memberSalary" value="22.1"/>
    </bean>

    <!--给bean的属性赋值：特殊值处理-->
    <bean id="propValue" class="com.fisher.spring.ioc.component.PropValue">
        <!--"<"在xml文档中用来定义标签的开始，不能直接使用在表达式中-->
        <!--可以使用xml实体代替-->
        <property name="expression" value="a &lt; b"/>
        <!--使用CDATA节-->
        <!-- CDATA中的C代表Character，是文本、字符的含义，CDATA就表示纯文本数据 -->
        <!-- XML解析器看到CDATA节就知道这里是纯文本，就不会当作XML标签或属性来解析 -->
        <!-- 所以CDATA节中写什么符号都随意 -->
        <property name="commonValue">
            <value><![CDATA[a < b]]></value>
        </property>
    </bean>

    <!--给bean的属性赋值：使用p名称空间(可以省略子标签property)-->
    <bean id="propValue1" class="com.fisher.spring.ioc.component.PropValue"
          p:commonValue="true" p:expression="a = a"/>

    <!--给bean的属性赋值：集合属性-->
    <bean id="happyTeam2" class="com.fisher.spring.ioc.component.HappyTeam">
        <property name="memberList">
            <list>
                <value>member01</value>
                <value>member02</value>
                <value>member03</value>
            </list>
        </property>
    </bean>
    <!--给bean的属性赋值：自动装配-->
    <bean id="happyService" class="com.fisher.spring.service.HappyService"/>
    <bean id="happyService1" class="com.fisher.spring.service.HappyService"/>

    <!-- byName：根据bean 的id属性进行匹配-->
    <bean id="happyController"
          class="com.fisher.spring.controller.HappyController" autowire="byName"/>

    <!--集合类型的bean-->
    <util:list id="machineList">
        <bean class="com.fisher.spring.ioc.component.HappyMachine">
            <property name="happyMachineName" value="machine01"/>
        </bean>
        <bean class="com.fisher.spring.ioc.component.HappyMachine">
            <property name="happyMachineName" value="machine02"/>
        </bean>
        <bean class="com.fisher.spring.ioc.component.HappyMachine">
            <property name="happyMachineName" value="machine03"/>
        </bean>
        <bean class="com.fisher.spring.ioc.component.HappyMachine">
            <property name="happyMachineName" value="machine04"/>
        </bean>
    </util:list>
    <!--FactoryBean机制-->
    <bean id="happyMachine3" class="com.fisher.spring.ioc.factory.HappyFactoryBean">
        <property name="happyMachineName" value="iceCreamMachine"/>
    </bean>
    <!--bean的作用域-->
    <!--scope 属性：
                singleton(默认值)：bean在IoC容器中只有一个实例，IoC初始化时创建对象
                prototype：bean在IoC容器中可以有多个实例，getBean()时创建对象-->
    <bean id="happyMachine4" class="com.fisher.spring.ioc.component.HappyMachine">
        <property name="happyMachineName" value="iceCreamMachine"/>
    </bean>

    <!--bean的生命周期-->
    <bean id="happyComponentLife"
          class="com.fisher.spring.ioc.component.HappyComponent"
          init-method="happyInit"
          destroy-method="happyDestroy">
        <property name="componentName" value="this is the life of a bean"/>
    </bean>
    <!--bean的后置处理器-->
    <bean id="happyBeanProcessor" class="com.fisher.spring.ioc.process.MyHappyBeanProcessor"/>

</beans>